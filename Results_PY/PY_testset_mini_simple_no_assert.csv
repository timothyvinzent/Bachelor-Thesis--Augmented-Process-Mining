"Instruction","Column","df_name","Example","Rationale","Description","PM_Metric","Code 1","Code 2","Code 3","errors","pred_col","num_rows_different"
"Create column called ""dismissed_by_prefecture"", defined as a boolean. True if any of the values of a case in column dismissal = ""#"" , if not False. Apply the same value across all rows of each case","dismissed_by_prefecture","1","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: dismissed_by_prefecture, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""dismissed_by_prefecture""
dp['dismissed_by_prefecture'] = dp.groupby('case_concept_name')['dismissal'].transform(lambda x: (x == '#').any()).astype(bool)

# Ensure the new column is of integer type and has no NaN values
dp['dismissed_by_prefecture'] = dp['dismissed_by_prefecture'].fillna(0).astype(int)

# Update the database table with the new column now referred to as dismissed_by_prefecture
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN dismissed_by_prefecture INTEGER"")  # Assuming ""dismissed_by_prefecture"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: dismissed_by_prefecture, Length: 561470, dtype: bool","0"
"Create column called ""dismissed_by_judge"", defined as a boolean. True if any of the values of a case in column dismissal = ""G"" , if not False. Apply the same value across all rows of each case","dismissed_by_judge","1","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: dismissed_by_judge, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""dismissed_by_judge""
dp['dismissed_by_judge'] = dp.groupby('case_concept_name')['dismissal'].transform(lambda x: 'G' in x.values).astype(bool)

# Ensure the new column is of integer type and has no NaN values
dp['dismissed_by_judge'] = dp['dismissed_by_judge'].fillna(0).astype(int)

# Update the database table with the new column now referred to as dismissed_by_judge
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN dismissed_by_judge INTEGER"")  # Assuming ""dismissed_by_judge"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: dismissed_by_judge, Length: 561470, dtype: bool","0"
"Create a column called ""maxtotalPaymentAmount"", type int, which for every case is the highest ""totalPaymentAmount"" value, if all the values of ""totalPaymentAmount"" are Nan or Null, simply use 0 instead. Make sure its the same value applied to each row of a case","maxtotalPaymentAmount","1","0         0
1         0
2         0
3         0
4         0
         ..
561465    0
561466    0
561467    0
561468    0
561469    0
Name: maxtotalPaymentAmount, Length: 561470, dtype: int64","No rationale","No description","0.0","No code","No code","No code","[]","error","561470"
"Create a column called ""expense_sum"", defined as type int, which sums all ""expense"" values per case, make sure this exepense_sum is the same for every row in a case","expense_sum","1","0         1100
1         1100
2         1100
3         1100
4         1100
          ... 
561465    1516
561466    1516
561467    1516
561468    1516
561469    1516
Name: expense_sum, Length: 561470, dtype: int64","No rationale","No description","0.0","No code","No code","No code","[]","error","561470"
"Create a column called ""amount_last"", defined as type int, which takes the highest ""amount"" value per case, make sure ""amount_last"" is the same for every row in a case","amount_last","1","0          3500
1          3500
2          7150
3          7150
4          7150
          ...  
561465    26200
561466    26200
561467    26200
561468    26200
561469    26200
Name: amount_last, Length: 561470, dtype: int64","No rationale","No description","0.0","No code","No code","No code","[]","error","561470"
"Create a column called ""dismissed"" which is a boolean, TRUE if any of the values in a case of ""dismissal"" contain either  ""G"" or ""#"", if not False. Apply the same value across all rows of each case","dismissed","1","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: dismissed, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""dismissed"" based on the values in ""dismissal""
dp['dismissed'] = dp.groupby('case_concept_name')['dismissal'].transform(lambda x: x.isin(['G', '#']).any()).astype(bool)

# Ensure the new column is of integer type and has no NaN values
dp['dismissed'] = dp['dismissed'].fillna(0).astype(int)

# Update the database table with the new column now referred to as dismissed
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN dismissed INTEGER"")  # Assuming ""dismissed"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: dismissed, Length: 561470, dtype: bool","0"
"Create a column called ""credit_collected"" which is a boolean. True if any of the values in a case in the column ""concept_name"" contain ""Send for Credit Collection"", if not False. Apply the same value across all rows of each case.","credit_collected","1","0         False
1         False
2          True
3          True
4          True
          ...  
561465     True
561466     True
561467     True
561468     True
561469     True
Name: credit_collected, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""credit_collected""
dp['credit_collected'] = dp.groupby('case_concept_name')['concept_name'].transform(lambda x: x.str.contains('Send for Credit Collection').any()).astype(bool)

# Ensure the new column is of integer type and has no NaN values
dp['credit_collected'] = dp['credit_collected'].fillna(0).astype(int)

# Update the database table with the new column now referred to as credit_collected
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN credit_collected INTEGER"")  # Assuming ""credit_collected"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2          True
3          True
4          True
          ...  
561465     True
561466     True
561467     True
561468     True
561469     True
Name: credit_collected, Length: 561470, dtype: bool","0"
"Create a column called ""penalty_added"" which is a boolean, TRUE if any of the values in a case in the column ""concept_name""contain ""Add penalty"", if not False. Apply the same value across all rows of each case.","penalty_added","1","0         False
1         False
2          True
3          True
4          True
          ...  
561465     True
561466     True
561467     True
561468     True
561469     True
Name: penalty_added, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""penalty_added""
dp['penalty_added'] = dp.groupby('case_concept_name')['concept_name'].transform(lambda x: x.str.contains('Add penalty').any()).astype(bool)

# Ensure the new column is of integer type and has no NaN values
dp['penalty_added'] = dp['penalty_added'].fillna(0).astype(int)

# Update the database table with the new column now referred to as penalty_added
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN penalty_added INTEGER"")  # Assuming ""penalty_added"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2          True
3          True
4          True
          ...  
561465     True
561466     True
561467     True
561468     True
561469     True
Name: penalty_added, Length: 561470, dtype: bool","0"
"Create a column called ""appealed_to_judge"" which is a boolean. TRUE if any of the values in a case in the column ""concept_name"" of a case contains ""Appeal to Judge"". False if else. Make sure ""appealed_to_judge"" is the same value across all rows of a case.","appealed_to_judge","1","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: appealed_to_judge, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""appealed_to_judge""
dp['appealed_to_judge'] = dp.groupby('case_concept_name')['concept_name'].transform(lambda x: x.str.contains('Appeal to Judge').any()).astype(int)

# Ensure the new column is of integer type and has no NaN values
dp['appealed_to_judge'] = dp['appealed_to_judge'].fillna(0).astype(int)

# Update the database table with the new column now referred to as appealed_to_judge
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN appealed_to_judge INTEGER"")  # Assuming ""appealed_to_judge"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: appealed_to_judge, Length: 561470, dtype: bool","0"
"Create a column called ""appealed_to_prefecture"" which is a boolean. TRUE if any of the values in a case in the column ""concept_name"" of a case contains ""Insert Date Appeal to Prefecture"". False if else. Make sure ""appealed_to_judge"" is the same value across all rows of a case.","appealed_to_prefecture","1","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: appealed_to_prefecture, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""appealed_to_prefecture""
dp['appealed_to_prefecture'] = dp.groupby('case_concept_name')['concept_name'].transform(lambda x: x.str.contains(""Insert Date Appeal to Prefecture"").any()).astype(int)

# Fill NaN values and ensure the column is of integer type
dp['appealed_to_prefecture'] = dp['appealed_to_prefecture'].fillna(0).astype(int)

# Update the database table with the new column now referred to as appealed_to_prefecture
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN appealed_to_prefecture INTEGER"")  # Assuming ""appealed_to_prefecture"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: appealed_to_prefecture, Length: 561470, dtype: bool","0"
"Create a column called ""outstanding_balance"", as type int, which is defined as ""amount_last"" + ""expense_sum"" - ""maxtotalPaymentAmount"" for only the last row/event per case (i.e only consider the last row for each case during the calculation), make sure ""outstanding_balance"" is the same for every row in a case.","outstanding_balance","2","0          4600
1          4600
2          8250
3          8250
4          8250
          ...  
561465    27716
561466    27716
561467    27716
561468    27716
561469    27716
Name: outstanding_balance, Length: 561470, dtype: int64","No rationale","No description","0.0","No code","No code","No code","[]","error","561470"
"Create a column called ""credit_collected_AND_dismissed"" which is a boolean. Defined as TRUE if per case any of the rows are TRUE in the column ""dismissed"" and TRUE for the column ""credit_collected"". If Else False. Make sure the value for ""credit_collected_AND_dismissed"" is the same across all rows of a case. ","credit_collected_AND_dismissed","2","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: credit_collected_AND_dismissed, Length: 561470, dtype: bool","No rationale","No description","0.0","import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""credit_collected_AND_dismissed""
dp['credit_collected_AND_dismissed'] = dp.groupby('case_concept_name').apply(
    lambda x: (x['dismissal'] != 'NIL').any() and (x['obligation_topay_cancelled'] == 1).any()
).astype(int).fillna(0)

# Ensure the new column is of integer type and has no NaN values
dp['credit_collected_AND_dismissed'] = dp['credit_collected_AND_dismissed'].fillna(0).astype(int)

# Update the database table with the new column now referred to as credit_collected_AND_dismissed
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN credit_collected_AND_dismissed INTEGER"")  # Assuming ""credit_collected_AND_dismissed"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()","No code","No code","[]","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: credit_collected_AND_dismissed, Length: 561470, dtype: bool","0"
"Create a column called ""paid_nothing"" which is a boolean. Defined as TRUE if and only if per case the column ""maxotalPaymentAmount"" is smaller equal to 0. Make sure the value for ""paid_nothing"" is the same across all rows of a case.","paid_nothing","2","0         True
1         True
2         True
3         True
4         True
          ... 
561465    True
561466    True
561467    True
561468    True
561469    True
Name: paid_nothing, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""paid_nothing"" based on the condition
dp['paid_nothing'] = dp.groupby('case_concept_name')['totalPaymentAmount'].transform(lambda x: (x.max() <= 0)).astype(bool)

# Ensure the new column is of integer type and has no NaN values
dp['paid_nothing'] = dp['paid_nothing'].fillna(0).astype(int)

# Update the database table with the new column now referred to as paid_nothing
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN paid_nothing INTEGER"")  # Assuming ""paid_nothing"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         True
1         True
2         True
3         True
4         True
          ... 
561465    True
561466    True
561467    True
561468    True
561469    True
Name: paid_nothing, Length: 561470, dtype: bool","0"
"Create a column called ""appeal_judge_cancelled"" which is a boolean on a per case basis. TRUE if the column ""appealed_to_judge"" == TRUE AND the column ""dismissed_by_judge"" == FALSE, if else ""appeal_judge_cancelled"" == FALSE. Make sure all values of ""appeal_judge_cancelled"" are the same across all rows of a case.","appeal_judge_cancelled","2","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: appeal_judge_cancelled, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""appeal_judge_cancelled""
dp['appeal_judge_cancelled'] = ((dp['concept_name'] == 'Appeal to Judge') & 
                                 (dp['dismissal'] != 'G')).astype(bool)

# Ensure all values are the same across all rows of a case
dp['appeal_judge_cancelled'] = dp.groupby('case_concept_name')['appeal_judge_cancelled'].transform('first')

# Fill NaN values and convert to integer
dp['appeal_judge_cancelled'] = dp['appeal_judge_cancelled'].fillna(0).astype(int)

# Update the database table with the new column
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN appeal_judge_cancelled INTEGER"")  # Change to the actual type of the new column
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: appeal_judge_cancelled, Length: 561470, dtype: bool","3269"
"Create a column called ""appeal_prefecture_cancelled"" which is a boolean on a per case basis. TRUE if the column ""appealed_to_prefecture"" == TRUE AND the column ""dismissed_by_prefecture"" == FALSE, if else ""appeal_prefecture_cancelled"" == FALSE. Make sure all values of ""appeal_prefecture_cancelled"" are the same across all rows of a case.","appeal_prefecture_cancelled","2","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: appeal_prefecture_cancelled, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""appeal_prefecture_cancelled""
dp['appeal_prefecture_cancelled'] = ((dp['dismissal'] == '#') & (dp['obligation_topay_cancelled'] == 0)).astype(int)
dp['appeal_prefecture_cancelled'] = dp['appeal_prefecture_cancelled'].fillna(0).astype(int)

# Update the database table with the new column
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN appeal_prefecture_cancelled INTEGER"")  # Assuming ""appeal_prefecture_cancelled"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: appeal_prefecture_cancelled, Length: 561470, dtype: bool","16937"
"Create a column called ""fully_paid"" which is a boolean, TRUE if ""outstanding_balance"" <= 0, if else FALSE, for every case in the event log, make sure ""fully_paid"" is the same for every row in a case","fully_paid","3","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: fully_paid, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""fully_paid""
dp['fully_paid'] = (dp['amount'] - dp['totalPaymentAmount'] <= 0).astype(bool)

# Ensure the column is of integer type and has no NaN values
dp['fully_paid'] = dp['fully_paid'].fillna(0).astype(int)

# Update the database table with the new column
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN fully_paid INTEGER"")  # Change to the actual type of the new column
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1          True
2         False
3          True
4          True
          ...  
561465    False
561466     True
561467     True
561468    False
561469     True
Name: fully_paid, Length: 561470, dtype: bool","312565"
"Create a column called ""overpaid"" which is a boolean. TRUE if on a per case basis, the column ""outstanding_balance"" is smaller than 0. False if else. Make sure the value for ""overpaid"" is the same across all rows of a case.","overpaid","3","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: overpaid, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""overpaid""
dp['overpaid'] = (dp.groupby('case_concept_name')['totalPaymentAmount'].transform('sum') - 
                  dp.groupby('case_concept_name')['amount'].transform('first')) < 0
dp['overpaid'] = dp['overpaid'].fillna(0).astype(int)

# Update the database table with the new column now referred to as overpaid
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN overpaid INTEGER"")  # Assuming ""overpaid"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         True
1         True
2         True
3         True
4         True
          ... 
561465    True
561466    True
561467    True
561468    True
561469    True
Name: overpaid, Length: 561470, dtype: bool","356608"
"Create a column called ""underpaid"" which is a boolean. TRUE if on a per case basis, the column ""outstanding_balance"" is larger than 0. False if else. Make sure the value for ""underpaid"" is the same across all rows of a case.","underpaid","3","0         True
1         True
2         True
3         True
4         True
          ... 
561465    True
561466    True
561467    True
561468    True
561469    True
Name: underpaid, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""underpaid"" based on the condition
dp['underpaid'] = (dp.groupby('case_concept_name')['amount'].transform('sum') - dp.groupby('case_concept_name')['totalPaymentAmount'].transform('sum')) > 0
dp['underpaid'] = dp['underpaid'].fillna(False).astype(bool)

# Update the database table with the new column now referred to as underpaid
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN underpaid INTEGER"")  # Assuming ""underpaid"" is an integer type, change to the actual type of the new column
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         True
1         True
2         True
3         True
4         True
          ... 
561465    True
561466    True
561467    True
561468    True
561469    True
Name: underpaid, Length: 561470, dtype: bool","40324"
"Create a column called ""credit_collected_AND_fully_paid"" which is a boolean. Defined as TRUE if per case any of the rows are TRUE in the column ""fully_paid"" and TRUE for the column ""credit_collected"". If Else False. Make sure the value for ""credit_collected_AND_fully_paid"" is the same across all rows of a case. ","credit_collected_AND_fully_paid","4","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: credit_collected_AND_fully_paid, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column based on the instructions
dp['credit_collected_AND_fully_paid'] = dp.groupby('case_concept_name').apply(
    lambda x: (x['fully_paid'].any() and x['credit_collected'].any())
).reset_index(drop=True)

dp['credit_collected_AND_fully_paid'] = dp['credit_collected_AND_fully_paid'].fillna(0).astype(int)

# Update the database table with the new column now referred to as credit_collected_AND_fully_paid
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN credit_collected_AND_fully_paid INTEGER"")  # Assuming ""credit_collected_AND_fully_paid"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1          True
2         False
3         False
4          True
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: credit_collected_AND_fully_paid, Length: 561470, dtype: bool","59015"
"Create a column called ""dismissed_AND_fully_paid"" which is a boolean. Defined as TRUE if per case any of the rows are TRUE in the column ""dismissed"" and TRUE for the column ""fully_paid"". If Else False. Make sure the value for ""dismissed_AND_fully_paid"" is the same across all rows of a case. ","dismissed_AND_fully_paid","4","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: dismissed_AND_fully_paid, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""dismissed_AND_fully_paid""
dp['dismissed_AND_fully_paid'] = dp.groupby('case_concept_name').apply(
    lambda x: (x['dismissal'].isin(['G', '#']).any() and (x['totalPaymentAmount'] > 0).any())
).astype(bool).reset_index(drop=True)

# Fill NaN values and ensure integer type
dp['dismissed_AND_fully_paid'] = dp['dismissed_AND_fully_paid'].fillna(0).astype(int)

# Update the database table with the new column now referred to as dismissed_AND_fully_paid
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN dismissed_AND_fully_paid INTEGER"")  # Assuming ""dismissed_AND_fully_paid"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: dismissed_AND_fully_paid, Length: 561470, dtype: bool","12"
"Create a column called ""overpaid_amount"" which is an integer. Defined as 0 if the column ""overpaid"" == FALSE. If ""overpaid"" == TURE it is the difference between 0 and the column ""outstanding_balance"" (take the absolute value to avoid negative values. Make sure the value for ""overpaid_amount"" is the same across all rows of a case.","overpaid_amount","4","0         0
1         0
2         0
3         0
4         0
         ..
561465    0
561466    0
561467    0
561468    0
561469    0
Name: overpaid_amount, Length: 561470, dtype: int64","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""overpaid_amount""
dp['overpaid_amount'] = dp.apply(lambda row: abs(row['outstanding_balance']) if row['overpaid'] else 0, axis=1)
dp['overpaid_amount'] = dp['overpaid_amount'].fillna(0).astype(int)

# Update the database table with the new column now referred to as overpaid_amount
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN overpaid_amount INTEGER"")  # Assuming ""overpaid_amount"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[""'outstanding_balance'\\nStack trace:\\nLine 10: dp['overpaid_amount'] = dp.apply(lambda row: abs(row['outstanding_balance']) if row['overpaid'] else 0, axis=1)\\nLine 10: dp['overpaid_amount'] = dp.apply(lambda row: abs(row['outstanding_balance']) if row['overpaid'] else 0, axis=1)""]","error","561470"
"Create a column called ""underpaid_amount"" which is a integer. Defined as 0 if the column ""underpaid"" == FALSE. If ""underpaid"" == TURE it is equal to the value of the column ""outstanding_balance"". Make sure the value for ""underpaid_amount"" is the same across all rows of a case.","underpaid_amount","4","0          4600
1          4600
2          8250
3          8250
4          8250
          ...  
561465    27716
561466    27716
561467    27716
561468    27716
561469    27716
Name: underpaid_amount, Length: 561470, dtype: int64","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""underpaid_amount""
dp['underpaid_amount'] = dp.groupby('case_concept_name').apply(
    lambda x: x['outstanding_balance'].iloc[0] if x['underpaid'].iloc[0] else 0
).reset_index(drop=True)

dp['underpaid_amount'] = dp['underpaid_amount'].fillna(0).astype(int)

# Update the database table with the new column now referred to as underpaid_amount
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN underpaid_amount INTEGER"")  # Assuming ""underpaid_amount"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[""'outstanding_balance'\\nStack trace:\\nLine 10: dp['underpaid_amount'] = dp.groupby('case_concept_name').apply(\\nLine 11:     lambda x: x['outstanding_balance'].iloc[0] if x['underpaid'].iloc[0] else 0""]","error","561470"
"Create a column called ""part_paid"" which is a boolean. TRUE if on a per case basis, the column ""fully_paid"" AND ""paid_nothing""are equal to FALSE. If Either ""fully_paid"" OR ""paid_nothing"" == TRUE, ""part_paid"" == FALSE. Make sure the value for ""part_paid"" is the same across all rows of a case. ","part_paid","4","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: part_paid, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""part_paid""
dp['part_paid'] = ~(dp.groupby('case_concept_name')['fully_paid'].transform('any') | 
                   dp.groupby('case_concept_name')['paid_nothing'].transform('any'))

# Ensure the new column is of integer type and has no NaN values
dp['part_paid'] = dp['part_paid'].fillna(0).astype(int)

# Update the database table with the new column now referred to as part_paid
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN part_paid INTEGER"")  # Assuming ""part_paid"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: part_paid, Length: 561470, dtype: bool","53345"
"Create column called ""unresolved"" which is a boolean. TRUE if on a per case basis the column ""fully_paid"" AND ""credit_collected"" AND ""dismissed"" are == FALSE, if any of those columns are TRUE, ""unresolved"" == FALSE. Makse sure the value for ""unresolved"" is the same across all rows of a case.","unresolved","4","0          True
1          True
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: unresolved, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""unresolved""
dp['unresolved'] = ~(dp['fully_paid'] | dp['credit_collected'] | dp['dismissed'])
dp['unresolved'] = dp.groupby('case_concept_name')['unresolved'].transform('max').fillna(0).astype(bool)

# Update the database table with the new column now referred to as unresolved
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN unresolved BOOLEAN"")  # Assuming ""unresolved"" is a boolean type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[]","0          True
1          True
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: unresolved, Length: 561470, dtype: bool","161151"
"Create a column called ""paid_without_obligation"" which is a boolean on a per case basis. TRUE if the column ""obligation_topay_cancelled"" == TRUE AND the column ""fully_paid"" == TRUE. If else ""paid_without_obligation"" == FALSE. Makse sure all values for ""paid_without_obligation"" are the same across all rows of a case.","paid_without_obligation","4","0         False
1         False
2         False
3         False
4         False
          ...  
561465    False
561466    False
561467    False
561468    False
561469    False
Name: paid_without_obligation, Length: 561470, dtype: bool","No rationale","No description","0.0","
import pandas as pd
query = 'SELECT * FROM event_log'
dp = pd.read_sql_query(query, conn, parse_dates=['time_timestamp'])
for cols in dp.columns:
    if dp[cols].isin([0,1]).all() and not cols.endswith(""_count""):
        dp[cols] = dp[cols].astype(bool)

# Create new column ""paid_without_obligation""
dp['paid_without_obligation'] = dp.groupby('case_concept_name').apply(
    lambda x: (x['obligation_topay_cancelled'] == 1) & (x['totalPaymentAmount'] > 0)
).astype(int).fillna(0)

# Ensure the new column is of integer type and has no NaN values
dp['paid_without_obligation'] = dp['paid_without_obligation'].fillna(0).astype(int)

# Update the database table with the new column now referred to as paid_without_obligation
cur = conn.cursor()
cur.execute(""ALTER TABLE event_log ADD COLUMN paid_without_obligation INTEGER"")  # Assuming ""paid_without_obligation"" is an integer type
dp.to_sql('temp_table', conn, if_exists='replace', index=False)
conn.commit()
","No code","No code","[""incompatible index of inserted column with frame index\\nStack trace:\\nLine 10: dp['paid_without_obligation'] = dp.groupby('case_concept_name').apply(""]","error","561470"
